// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: clients.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CreateClient = `-- name: CreateClient :one
INSERT INTO clients (first_name, last_name, phone_number, chat_id, created_by)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, chat_id, first_name, last_name, phone_number, created_by, created_at, updated_at
`

type CreateClientParams struct {
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	PhoneNumber sql.NullString `json:"phone_number"`
	ChatID      sql.NullInt64  `json:"chat_id"`
	CreatedBy   uuid.NullUUID  `json:"created_by"`
}

func (q *Queries) CreateClient(ctx context.Context, arg *CreateClientParams) (*Client, error) {
	row := q.db.QueryRowContext(ctx, CreateClient,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.ChatID,
		arg.CreatedBy,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetClientByChatID = `-- name: GetClientByChatID :one
SELECT id, chat_id, first_name, last_name, phone_number, created_by, created_at, updated_at FROM clients
WHERE chat_id = $1
`

func (q *Queries) GetClientByChatID(ctx context.Context, chatID sql.NullInt64) (*Client, error) {
	row := q.db.QueryRowContext(ctx, GetClientByChatID, chatID)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetClientByID = `-- name: GetClientByID :one
SELECT id, chat_id, first_name, last_name, phone_number, created_by, created_at, updated_at FROM clients
WHERE id = $1
`

func (q *Queries) GetClientByID(ctx context.Context, id uuid.UUID) (*Client, error) {
	row := q.db.QueryRowContext(ctx, GetClientByID, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetClients = `-- name: GetClients :many
SELECT id, chat_id, first_name, last_name, phone_number, created_by, created_at, updated_at FROM clients
ORDER BY created_at DESC
`

func (q *Queries) GetClients(ctx context.Context) ([]*Client, error) {
	rows, err := q.db.QueryContext(ctx, GetClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Client{}
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateClientChatID = `-- name: UpdateClientChatID :one
UPDATE clients
SET chat_id = $2
WHERE id = $1
RETURNING id, chat_id, first_name, last_name, phone_number, created_by, created_at, updated_at
`

type UpdateClientChatIDParams struct {
	ID     uuid.UUID     `json:"id"`
	ChatID sql.NullInt64 `json:"chat_id"`
}

func (q *Queries) UpdateClientChatID(ctx context.Context, arg *UpdateClientChatIDParams) (*Client, error) {
	row := q.db.QueryRowContext(ctx, UpdateClientChatID, arg.ID, arg.ChatID)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
