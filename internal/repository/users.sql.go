// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const GetUserByChatID = `-- name: GetUserByChatID :one
SELECT 
    id,
    chat_id,
    first_name,
    last_name,
    phone_number,
    created_at,
    updated_at,
    'client' as role,
    NULL as username
FROM clients 
WHERE clients.chat_id = $1

UNION ALL

SELECT 
    id,
    chat_id,
    first_name,
    last_name,
    phone_number,
    created_at,
    updated_at,
    'professional' as role,
    username
FROM professionals 
WHERE professionals.chat_id = $1
`

type GetUserByChatIDRow struct {
	ID          uuid.UUID      `json:"id"`
	ChatID      sql.NullInt64  `json:"chat_id"`
	FirstName   string         `json:"first_name"`
	LastName    string         `json:"last_name"`
	PhoneNumber sql.NullString `json:"phone_number"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	Role        string         `json:"role"`
	Username    interface{}    `json:"username"`
}

func (q *Queries) GetUserByChatID(ctx context.Context, chatID sql.NullInt64) (*GetUserByChatIDRow, error) {
	row := q.db.QueryRowContext(ctx, GetUserByChatID, chatID)
	var i GetUserByChatIDRow
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Role,
		&i.Username,
	)
	return &i, err
}
