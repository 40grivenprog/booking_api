// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: professionals.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const CreateProfessional = `-- name: CreateProfessional :one
INSERT INTO professionals (username, first_name, last_name, phone_number, password_hash, chat_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, chat_id, first_name, last_name, phone_number, username, password_hash, created_at, updated_at
`

type CreateProfessionalParams struct {
	Username     string         `json:"username"`
	FirstName    string         `json:"first_name"`
	LastName     string         `json:"last_name"`
	PhoneNumber  sql.NullString `json:"phone_number"`
	PasswordHash sql.NullString `json:"password_hash"`
	ChatID       sql.NullInt64  `json:"chat_id"`
}

func (q *Queries) CreateProfessional(ctx context.Context, arg *CreateProfessionalParams) (*Professional, error) {
	row := q.db.QueryRowContext(ctx, CreateProfessional,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.PasswordHash,
		arg.ChatID,
	)
	var i Professional
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetProfessionalByChatID = `-- name: GetProfessionalByChatID :one
SELECT id, chat_id, first_name, last_name, phone_number, username, password_hash, created_at, updated_at FROM professionals
WHERE chat_id = $1
`

func (q *Queries) GetProfessionalByChatID(ctx context.Context, chatID sql.NullInt64) (*Professional, error) {
	row := q.db.QueryRowContext(ctx, GetProfessionalByChatID, chatID)
	var i Professional
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetProfessionalByID = `-- name: GetProfessionalByID :one
SELECT id, chat_id, first_name, last_name, phone_number, username, password_hash, created_at, updated_at FROM professionals
WHERE id = $1
`

func (q *Queries) GetProfessionalByID(ctx context.Context, id uuid.UUID) (*Professional, error) {
	row := q.db.QueryRowContext(ctx, GetProfessionalByID, id)
	var i Professional
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetProfessionalByUsername = `-- name: GetProfessionalByUsername :one
SELECT id, chat_id, first_name, last_name, phone_number, username, password_hash, created_at, updated_at FROM professionals
WHERE username = $1
`

func (q *Queries) GetProfessionalByUsername(ctx context.Context, username string) (*Professional, error) {
	row := q.db.QueryRowContext(ctx, GetProfessionalByUsername, username)
	var i Professional
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetProfessionals = `-- name: GetProfessionals :many
SELECT id, chat_id, first_name, last_name, phone_number, username, password_hash, created_at, updated_at FROM professionals
ORDER BY created_at DESC
`

func (q *Queries) GetProfessionals(ctx context.Context) ([]*Professional, error) {
	rows, err := q.db.QueryContext(ctx, GetProfessionals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Professional{}
	for rows.Next() {
		var i Professional
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.Username,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateProfessionalChatID = `-- name: UpdateProfessionalChatID :one
UPDATE professionals
SET chat_id = $2
WHERE id = $1
RETURNING id, chat_id, first_name, last_name, phone_number, username, password_hash, created_at, updated_at
`

type UpdateProfessionalChatIDParams struct {
	ID     uuid.UUID     `json:"id"`
	ChatID sql.NullInt64 `json:"chat_id"`
}

func (q *Queries) UpdateProfessionalChatID(ctx context.Context, arg *UpdateProfessionalChatIDParams) (*Professional, error) {
	row := q.db.QueryRowContext(ctx, UpdateProfessionalChatID, arg.ID, arg.ChatID)
	var i Professional
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const VerifyProfessionalCredentials = `-- name: VerifyProfessionalCredentials :one
SELECT id, chat_id, first_name, last_name, phone_number, username, password_hash, created_at, updated_at FROM professionals
WHERE username = $1 AND password_hash = $2
`

type VerifyProfessionalCredentialsParams struct {
	Username     string         `json:"username"`
	PasswordHash sql.NullString `json:"password_hash"`
}

func (q *Queries) VerifyProfessionalCredentials(ctx context.Context, arg *VerifyProfessionalCredentialsParams) (*Professional, error) {
	row := q.db.QueryRowContext(ctx, VerifyProfessionalCredentials, arg.Username, arg.PasswordHash)
	var i Professional
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
