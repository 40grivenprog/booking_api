// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: professionals.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const CreateProfessional = `-- name: CreateProfessional :one
INSERT INTO professionals (username, first_name, last_name, phone_number, password_hash, chat_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, chat_id, first_name, last_name, phone_number, username, password_hash, created_at, updated_at
`

type CreateProfessionalParams struct {
	Username     string         `json:"username"`
	FirstName    string         `json:"first_name"`
	LastName     string         `json:"last_name"`
	PhoneNumber  sql.NullString `json:"phone_number"`
	PasswordHash sql.NullString `json:"password_hash"`
	ChatID       sql.NullInt64  `json:"chat_id"`
}

func (q *Queries) CreateProfessional(ctx context.Context, arg *CreateProfessionalParams) (*Professional, error) {
	row := q.db.QueryRowContext(ctx, CreateProfessional,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.PhoneNumber,
		arg.PasswordHash,
		arg.ChatID,
	)
	var i Professional
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetAppointmentsByProfessionalWithStatusAndDate = `-- name: GetAppointmentsByProfessionalWithStatusAndDate :many
SELECT 
    a.id,
    a.type,
    a.start_time,
    a.end_time,
    a.description,
    a.status,
    a.created_at,
    a.updated_at,
    a.client_id,
    c.first_name as client_first_name,
    c.last_name as client_last_name,
    c.phone_number as client_phone_number
FROM appointments a
LEFT JOIN clients c ON a.client_id = c.id
WHERE a.professional_id = $1
    AND ($2 = '' OR a.status = $2::appointment_status)
    AND ($3 = '' OR DATE(a.start_time) = $3::date)
ORDER BY a.start_time ASC
`

type GetAppointmentsByProfessionalWithStatusAndDateParams struct {
	ProfessionalID uuid.UUID   `json:"professional_id"`
	Column2        interface{} `json:"column_2"`
	Column3        interface{} `json:"column_3"`
}

type GetAppointmentsByProfessionalWithStatusAndDateRow struct {
	ID                uuid.UUID             `json:"id"`
	Type              AppointmentType       `json:"type"`
	StartTime         time.Time             `json:"start_time"`
	EndTime           time.Time             `json:"end_time"`
	Description       sql.NullString        `json:"description"`
	Status            NullAppointmentStatus `json:"status"`
	CreatedAt         time.Time             `json:"created_at"`
	UpdatedAt         time.Time             `json:"updated_at"`
	ClientID          uuid.NullUUID         `json:"client_id"`
	ClientFirstName   sql.NullString        `json:"client_first_name"`
	ClientLastName    sql.NullString        `json:"client_last_name"`
	ClientPhoneNumber sql.NullString        `json:"client_phone_number"`
}

func (q *Queries) GetAppointmentsByProfessionalWithStatusAndDate(ctx context.Context, arg *GetAppointmentsByProfessionalWithStatusAndDateParams) ([]*GetAppointmentsByProfessionalWithStatusAndDateRow, error) {
	rows, err := q.db.QueryContext(ctx, GetAppointmentsByProfessionalWithStatusAndDate, arg.ProfessionalID, arg.Column2, arg.Column3)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetAppointmentsByProfessionalWithStatusAndDateRow{}
	for rows.Next() {
		var i GetAppointmentsByProfessionalWithStatusAndDateRow
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.StartTime,
			&i.EndTime,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClientID,
			&i.ClientFirstName,
			&i.ClientLastName,
			&i.ClientPhoneNumber,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetProfessionalByUsername = `-- name: GetProfessionalByUsername :one
SELECT id, chat_id, first_name, last_name, phone_number, username, password_hash, created_at, updated_at FROM professionals
WHERE username = $1
`

func (q *Queries) GetProfessionalByUsername(ctx context.Context, username string) (*Professional, error) {
	row := q.db.QueryRowContext(ctx, GetProfessionalByUsername, username)
	var i Professional
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetProfessionals = `-- name: GetProfessionals :many
SELECT id, chat_id, first_name, last_name, phone_number, username, password_hash, created_at, updated_at FROM professionals
WHERE chat_id is not null
ORDER BY created_at DESC
`

func (q *Queries) GetProfessionals(ctx context.Context) ([]*Professional, error) {
	rows, err := q.db.QueryContext(ctx, GetProfessionals)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Professional{}
	for rows.Next() {
		var i Professional
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.FirstName,
			&i.LastName,
			&i.PhoneNumber,
			&i.Username,
			&i.PasswordHash,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateProfessionalChatID = `-- name: UpdateProfessionalChatID :one
UPDATE professionals
SET chat_id = $2
WHERE id = $1
RETURNING id, chat_id, first_name, last_name, phone_number, username, password_hash, created_at, updated_at
`

type UpdateProfessionalChatIDParams struct {
	ID     uuid.UUID     `json:"id"`
	ChatID sql.NullInt64 `json:"chat_id"`
}

func (q *Queries) UpdateProfessionalChatID(ctx context.Context, arg *UpdateProfessionalChatIDParams) (*Professional, error) {
	row := q.db.QueryRowContext(ctx, UpdateProfessionalChatID, arg.ID, arg.ChatID)
	var i Professional
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.FirstName,
		&i.LastName,
		&i.PhoneNumber,
		&i.Username,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
