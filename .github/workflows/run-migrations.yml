name: Run Database Migrations

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run migrations for'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      migration_direction:
        description: 'Migration direction'
        required: true
        default: 'up'
        type: choice
        options:
        - up
        - down
        - force
      migration_version:
        description: 'Migration version (for force)'
        required: false
        type: string
        default: ''

env:
  AWS_REGION: eu-central-1

jobs:
  run-migrations:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Run Migrations
      run: |
        echo "Starting database migrations for ${{ github.event.inputs.environment }} environment..."
        echo "Direction: ${{ github.event.inputs.migration_direction }}"
        
        # Get ECS cluster and task definition
        CLUSTER_NAME="booking-app-${{ github.event.inputs.environment }}"
        TASK_DEFINITION="booking-app-${{ github.event.inputs.environment }}-db-migration"
        
        # Get subnets and security groups from VPC
        VPC_ID=$(aws ec2 describe-vpcs \
          --filters "Name=tag:Name,Values=*shared*" \
          --region ${{ env.AWS_REGION }} \
          --query 'Vpcs[0].VpcId' \
          --output text)
        
        SUBNET_IDS=$(aws ec2 describe-subnets \
          --filters "Name=vpc-id,Values=$VPC_ID" "Name=tag:Name,Values=*public*" \
          --region ${{ env.AWS_REGION }} \
          --query 'Subnets[].SubnetId' \
          --output text | tr '\t' ',')
        
        SECURITY_GROUP_ID=$(aws ec2 describe-security-groups \
          --filters "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=*rds*" \
          --region ${{ env.AWS_REGION }} \
          --query 'SecurityGroups[0].GroupId' \
          --output text)
        
        # Build command based on direction
        if [[ "${{ github.event.inputs.migration_direction }}" == "up" ]]; then
          COMMAND='["-direction=up"]'
        elif [[ "${{ github.event.inputs.migration_direction }}" == "down" ]]; then
          COMMAND='["-direction=down","-steps=1"]'
        elif [[ "${{ github.event.inputs.migration_direction }}" == "force" ]]; then
          if [[ -z "${{ github.event.inputs.migration_version }}" ]]; then
            echo "Error: Migration version required for force operation"
            exit 1
          fi
          COMMAND="[\"-direction=force\",\"-version=${{ github.event.inputs.migration_version }}\"]"
        fi
        
        echo "Running migrations via ECS task..."
        aws ecs run-task \
          --cluster "$CLUSTER_NAME" \
          --task-definition "$TASK_DEFINITION" \
          --launch-type "FARGATE" \
          --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$SECURITY_GROUP_ID],assignPublicIp=ENABLED}" \
          --overrides "containerOverrides=[{name=\"db-migration\",command=$COMMAND}]" \
          --region ${{ env.AWS_REGION }}
        
        echo "Database migrations completed successfully!"

    - name: Migration Summary
      run: |
        echo "## Migration Completed Successfully!"
        echo ""
        echo "**Environment:** ${{ github.event.inputs.environment }}"
        echo "**Direction:** ${{ github.event.inputs.migration_direction }}"
        if [[ "${{ github.event.inputs.migration_direction }}" == "force" ]]; then
          echo "**Version:** ${{ github.event.inputs.migration_version }}"
        fi
        echo ""
        echo "### Next Steps:"
        echo "1. Migration completed"
        echo "2. Check application logs if needed"
        echo "3. Verify database schema changes"
