name: Create Draft Release

on:
  pull_request:
    types: [closed]

jobs:
  create-draft-release:
    if: github.event.pull_request.merged == true && (contains(github.event.pull_request.labels.*.name, 'major') || contains(github.event.pull_request.labels.*.name, 'minor') || contains(github.event.pull_request.labels.*.name, 'patch'))
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0

    - name: Get current version
      id: get_version
      run: |
        LATEST_TAG=$(git tag --sort=-version:refname | head -n1 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        
        VERSION=$(echo $LATEST_TAG | sed 's/v//')
        echo "current_version=$VERSION" >> $GITHUB_OUTPUT
        
        echo "Debug: Latest tag found: $LATEST_TAG"
        echo "Debug: Current version: $VERSION"

    - name: Calculate new version
      id: calculate_version
      run: |
        CURRENT_VERSION="${{ steps.get_version.outputs.current_version }}"
        
        if [[ -z "$CURRENT_VERSION" ]] || [[ "$CURRENT_VERSION" == "0.0.0" ]]; then
          MAJOR=0
          MINOR=0
          PATCH=0
        else
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        fi
        
        LABELS="${{ join(github.event.pull_request.labels.*.name, ' ') }}"
        
        if [[ "$LABELS" == *"major"* ]]; then
          NEW_MAJOR=$((MAJOR + 1))
          NEW_MINOR=0
          NEW_PATCH=0
          VERSION_TYPE="major"
        elif [[ "$LABELS" == *"minor"* ]]; then
          NEW_MAJOR=$MAJOR
          NEW_MINOR=$((MINOR + 1))
          NEW_PATCH=0
          VERSION_TYPE="minor"
        elif [[ "$LABELS" == *"patch"* ]]; then
          NEW_MAJOR=$MAJOR
          NEW_MINOR=$MINOR
          NEW_PATCH=$((PATCH + 1))
          VERSION_TYPE="patch"
        else
          echo "No version label found in: $LABELS"
          exit 1
        fi
        
        NEW_VERSION="${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
        NEW_TAG="v${NEW_VERSION}"
        
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
        echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
        
        echo "Debug: Current version parts - MAJOR:$MAJOR MINOR:$MINOR PATCH:$PATCH"
        echo "Debug: New version parts - MAJOR:$NEW_MAJOR MINOR:$NEW_MINOR PATCH:$NEW_PATCH"
        echo "Debug: Labels found: $LABELS"
        echo "Debug: Version type: $VERSION_TYPE"

    - name: Get PR titles since last release
      id: get_pr_titles
      run: |
        LATEST_TAG="${{ steps.get_version.outputs.latest_tag }}"
        NEW_TAG="${{ steps.calculate_version.outputs.new_tag }}"
        
        if [[ "$LATEST_TAG" == "v0.0.0" ]]; then
          # First release - get all PRs merged to main
          PR_TITLES=$(gh pr list --state merged --base main --json title --jq '.[].title' | sed 's/^/- /')
        else
          # Get PRs merged since last tag
          PR_TITLES=$(gh pr list --state merged --base main --json title,mergedAt --jq '.[] | select(.mergedAt > "'$(git log -1 --format=%ai "$LATEST_TAG")'") | .title' | sed 's/^/- /')
        fi
        
        if [[ -z "$PR_TITLES" ]]; then
          PR_TITLES="- No PRs found since last release"
        fi
        
        echo "pr_titles<<EOF" >> $GITHUB_OUTPUT
        echo "$PR_TITLES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Draft Release
      run: |
        gh release create ${{ steps.calculate_version.outputs.new_tag }} \
          --title "Release ${{ steps.calculate_version.outputs.new_tag }}" \
          --notes "## Changes
        
        This is a draft release for version ${{ steps.calculate_version.outputs.new_tag }}
        
        ### Version Type: ${{ steps.calculate_version.outputs.version_type }}
        
        - Previous version: ${{ steps.get_version.outputs.latest_tag }}
        - New version: ${{ steps.calculate_version.outputs.new_tag }}
        
        ### Merged PRs since last release:
        ${{ steps.get_pr_titles.outputs.pr_titles }}
        
        ### Next Steps
        1. Review the changes
        2. Publish this release to trigger image build
        3. Deploy to dev/prod with the new image tag" \
          --draft
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN }}
